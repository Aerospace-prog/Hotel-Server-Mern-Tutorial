
 What are models OR scheme in Mongoose?

    Models are basically the blueprint of the data that we are gonna store in the database.
    We can preform CRUD operation on the models/schema.
    For Blueprint we maintain a folder called models
    Schema is a data structure(types , required, unique values ) of the models.



Body-parser --> is a middleware library of Express.js
    It is used to parse and extract the body of incoming HTTP requests.,SO it grabs JSON data and converts in object and stores in req.body


Async and await --> are features in JavaScript that make it easier to work with asynchronous code, such as network requests, file system operations, or database queries.
    Using try and catch block
    The try block contains the code for creating a new Person document and saving it to the database using await newPerson.save().
    If an error occurs during any step, it is caught in the catch block, and an error response is sent with a 500 Internal Server Error status.


Parameterized API Calls --> Now if someone told us to give a list of people who are only waiters EG:- /person/waiters

Parameterized URL --> localhost:3000/person/:work
--> work : ["chef","waiter","manager"]


Express Route ==>
We have a lots of Endpoints in a single file server.js
This makes bad experience in code readability as well as code handling Express Router is a way to modularize and organize your route handling code in an Express.js application.
So let's create a separate file to manage endpoints /person and /menu Express Router is like a traffic cop for your web server
Express Router helps you organize and manage these pages or endpoints
in your web application. It's like creating separate folders for different types of tasks.
Create a folder ROUTES to store all your routes



Update operation==>
For Updation we need two things o Which record we want to update?
What exactly we want to update?
For update we will use PUT method to create a endpoint

Delete operation ==>
We will Delete our person Record, for that we will create an endpoint from where we are able to delete record
For Deletion we need one things
Which record we want to update ?
For delete we will use DELETE method to create a endpoint
What is a unique identifier in a document in a collection?
It's_id which is given by mongodb itself, we will use this to find the particular record which we want to delete

Host DB Server==>
To Host out mongoDb databse on cloud we will use MongoDB Atlas

Dotenv Module ==>
We will use dotenv to store our sensitive data like password, username etc in a file named .env

Host NodeJS Server ==>
online public accessible server to make out application run 24*7 
Ex:- heroku (paid), netlify (complex method), RENDER (recommended)

Middleware ==>
Imagine you're at a restaurant, and you've placed an order for your favorite dish. Now, before that dish reaches your table, it goes through several stages in the kitchen. Each stage involves different tasks, like chopping vegetables, cooking, and adding spices. Middleware is a bit like these stages in the kitchen-it's something that happens in between your request and the final response in a web application.
In summary, middleware is like a series of tasks that happen behind the scenes in a web application. It's a way to add extra functionality to your application's
request-response cycle such as logging, authentication checks, or modifying request data, before it reaches its final destination.



In general, authentication is applied before authorization in the security process. Here's the typical sequence:
1. Authentication:
o The first step is to verify the identity of the user or system entity attempting to access a resource or perform an action. This involves checking credentials such as usernames and passwords or using other authentication methods like tokens, API keys, or certificates.
2. Authorization:
o Once the identity is verified through authentication, the system moves on to authorization. Authorization determines what actions or resources the authenticated user or entity is allowed to access based on their permissions, roles, or other access control mechanisms.


Passport.js ==> is a popular authentication middleware for Node.js. It provides a simple and flexible way to implement authentication in your application. Passport.js gives pre-built strategies for different authentication methods, such as username , password, OAuth, OpenID, and more.AND Passport LocalStategy is a part of passport.js which is specifically designed for username and password authentication.
INSTALL --> `npm install passport passport-local`



Store Plain Password ==>
Storing plain passwords is not a secure practice To enhance security, it's highly recommended to hash and salt passwords before storing them.We can use bcrypt

simple pass + HASHING + SALT == secure password(stored in DB)


Verifying a password==>
When you later want to verify a user's entered password during login, you use bcrypt.compare. This function internally extracts the salt from the stored hashed password and uses it to hash the entered password for comparison.

`const isMatch = await bcrypt.compare('enteredPass',storedHasPass);`

The compare function automatically extracts the salt from storedHashed Password and uses it to hash the entered password. It then compares the resulting hash with the stored hash. If they match, it indicates that the entered password is correct.


Sessions & Cookies ==>
Sessions are a way to maintain user state and authenticate users in web applications. 
1. User Authentication

When you visit a website or use a web application, you must log in to access certain features or personalized content. Sessions or tokens are used to authenticate users, proving that they are who they claim to be. This ensures that only authorized users can access restricted areas or perform certain actions.

2. Maintaining User State

Web applications often need to remember user information as they navigate through different pages or interact with the app. Sessions or tokens help maintain this user state. For example, if you add items to your shopping cart on an e-commerce website, the website needs to remember those items as you browse other pages. Sessions or tokens store this information so that it can be accessed later.

3. Security

Sessions and tokens play a crucial role in securing web applications. They help prevent unauthorized access by verifying the identity of users before granting them access to sensitive data or functionality. Additionally, they can be used to protect against common security threats such as session hijacking or cross-site request forgery (CSRF) attacks.


Sessions based Authentication==>
• A session is a way or a small file, most likely in JSON format, that stores
information about the user, such as a unique ID, time of login expirations, and so on. It is generated and stored on the server so that the server can keep track of the user requests.
Working
1. The user sends a login request to the server.
2. The server authenticates the login request, sends a session to the database, and returns a cookie containing the session ID to the user.
3. Now, the user sends new requests (with a cookie).
4. The server checks in the database for the ID found in the cookie, if the ID is found it sends the requested pages to the user.

Cookies -->
A cookie is a small peice of data that a website stores on a users computer or devce.Cookies are commoly used to remember information about user browsing activity.

Types ->
a. Session cookies - these cookies are stored temporary and deleted when you close browser
b. persistent cookies - these cookies stored on your device for a specific duration



Tokens --> refer to a broad category of authentication credentials, whereas JWT is a specific format or implementation of tokens.
JWT (JSON Web Token)
• Definition: JWT is a specific type of token format defined by the JSON Web Token standard (RFC 7519). It is a compact and self-contained means of transmitting information between parties as a JSON object.
• Structure: JWTS consist of three parts: header, payload, and signature. They are typically encoded and signed using cryptographic algorithms.
⚫ Usage: JWTS are commonly used for authentication and authorization in web applications and APIs. They can store user claims, such as user ID, roles, permissions, and custom data, in a secure and portable format.
⚫ Statelessness: JWTS are stateless, meaning the server does not need to store session information. This makes them suitable for distributed architectures and scalable systems.